openapi: 3.0.0
info:
  title: Truto Test API
  version: '1.0.0'
  description: API for managing organizations, users, teams, contacts, and tickets

servers:
  - url: https://truto-test-api.truto.one
    description: Production server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
    
    Organization:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        name:
          type: string
        organization_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Ticket:
      type: object
      properties:
        id:
          type: integer
        subject:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [open, closed]
        priority:
          type: string
          enum: [low, normal, high]
        assignee_id:
          type: integer
          nullable: true
        contact_id:
          type: integer
          nullable: true
        organization_id:
          type: integer
        closed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        assignee:
          $ref: '#/components/schemas/User'
        contact:
          $ref: '#/components/schemas/Contact'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'

    PaginatedResponse:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
        next_cursor:
          type: string
          nullable: true
        prev_cursor:
          type: string
          nullable: true

    Contact:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        organization_id:
          type: integer
        emails:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              contact_id:
                type: integer
              email:
                type: string
              is_primary:
                type: boolean
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        phones:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              contact_id:
                type: integer
              phone:
                type: string
              is_primary:
                type: boolean
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Comment:
      type: object
      properties:
        id:
          type: integer
        ticket_id:
          type: integer
        body:
          type: string
        body_html:
          type: string
        is_private:
          type: boolean
        author_type:
          type: string
          enum: [user, contact]
        author_id:
          type: integer
        organization_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        author:
          oneOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Contact'
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/Attachment'

    Attachment:
      type: object
      properties:
        id:
          type: integer
        file_name:
          type: string
        content_type:
          type: string
        size:
          type: integer
        file_path:
          type: string
        ticket_id:
          type: integer
        organization_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    ContactCreate:
      type: object
      required:
        - name
        - organization_id
      properties:
        name:
          type: string
        organization_id:
          type: integer
        emails:
          type: array
          items:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
              is_primary:
                type: boolean
                default: false
        phones:
          type: array
          items:
            type: object
            required:
              - phone
            properties:
              phone:
                type: string
              is_primary:
                type: boolean
                default: false

    TicketCreate:
      type: object
      required:
        - subject
        - organization_id
      properties:
        subject:
          type: string
        description:
          type: string
        assignee_id:
          type: integer
        contact_id:
          type: integer
        organization_id:
          type: integer
        priority:
          type: string
          enum: [low, normal, high]
          default: normal
        status:
          type: string
          enum: [open, closed]
        created_at:
          type: string
          format: date-time
        closed_at:
          type: string
          format: date-time

    TicketUpdate:
      type: object
      properties:
        subject:
          type: string
        description:
          type: string
        assignee_id:
          type: integer
          nullable: true
        contact_id:
          type: integer
          nullable: true
        priority:
          type: string
          enum: [low, normal, high]
        status:
          type: string
          enum: [open, closed]

    CommentCreate:
      type: object
      required:
        - ticket_id
        - body
        - author_type
        - author_id
        - organization_id
      properties:
        ticket_id:
          type: integer
        body:
          type: string
        is_private:
          type: boolean
          default: false
        author_type:
          type: string
          enum: [user, contact]
        author_id:
          type: integer
        organization_id:
          type: integer

    CommentUpdate:
      type: object
      properties:
        body:
          type: string
        is_private:
          type: boolean

    ContactUpdate:
      type: object
      properties:
        name:
          type: string
        emails:
          type: array
          items:
            type: object
            required:
              - email
            properties:
              email:
                type: string
                format: email
              is_primary:
                type: boolean
        phones:
          type: array
          items:
            type: object
            required:
              - phone
            properties:
              phone:
                type: string
              is_primary:
                type: boolean

    Team:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        organization_id:
          type: integer
        members:
          type: array
          items:
            $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    TeamCreate:
      type: object
      required:
        - name
        - organization_id
      properties:
        name:
          type: string
        organization_id:
          type: integer
        member_ids:
          type: array
          items:
            type: integer

    TeamUpdate:
      type: object
      properties:
        name:
          type: string
        member_ids:
          type: array
          items:
            type: integer

    AttachmentCreate:
      type: object
      required:
        - file
        - ticket_id
      properties:
        file:
          type: string
          format: binary
        ticket_id:
          type: integer

security:
  - ApiKeyAuth: []

paths:
  /:
    get:
      summary: Health check endpoint
      responses:
        '200':
          description: Server health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string

  /organizations:
    get:
      summary: List organizations (returns user's organization)
      responses:
        '200':
          description: Successfully retrieved organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized

  /organizations/{id}:
    get:
      summary: Get a single organization
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved organization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Organization not found

  /tickets:
    get:
      summary: List tickets
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: assignee_id
          in: query
          schema:
            type: integer
        - name: contact_id
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
            enum: [open, closed]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, normal, high]
      responses:
        '200':
          description: Successfully retrieved tickets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized

    post:
      summary: Create a new ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCreate'
      responses:
        '201':
          description: Successfully created ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /tickets/{id}:
    get:
      summary: Get a single ticket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Ticket not found

    patch:
      summary: Update a ticket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketUpdate'
      responses:
        '200':
          description: Successfully updated ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Ticket not found

    delete:
      summary: Delete a ticket
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted ticket
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Ticket not found

  /users/me:
    get:
      summary: Get current user
      responses:
        '200':
          description: Successfully retrieved current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized

  /users:
    get:
      summary: List users
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: email
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized

  /users/{id}:
    get:
      summary: Get a single user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user ID
        '401':
          description: Unauthorized
        '404':
          description: User not found

  /contacts:
    get:
      summary: List contacts
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: email
          in: query
          schema:
            type: string
        - name: phone
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved contacts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized

    post:
      summary: Create a new contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactCreate'
      responses:
        '201':
          description: Successfully created contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /contacts/{id}:
    get:
      summary: Get a single contact
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid contact ID
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Contact not found

    patch:
      summary: Update a contact
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContactUpdate'
      responses:
        '200':
          description: Successfully updated contact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Contact not found

    delete:
      summary: Delete a contact
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted contact
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Contact not found

  /comments:
    get:
      summary: List comments
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: ticket_id
          in: query
          schema:
            type: integer
        - name: is_private
          in: query
          schema:
            type: boolean
        - name: author_type
          in: query
          schema:
            type: string
            enum: [user, contact]
        - name: author_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '400':
          description: Invalid parameters
        '401':
          description: Unauthorized

    post:
      summary: Create a new comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
      responses:
        '201':
          description: Successfully created comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /comments/{id}:
    get:
      summary: Get a single comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid comment ID
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Comment not found

    patch:
      summary: Update a comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
      responses:
        '200':
          description: Successfully updated comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Comment not found

    delete:
      summary: Delete a comment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted comment
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Comment not found

  /attachments:
    get:
      summary: List attachments
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: ticket_id
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized

    post:
      summary: Upload a new attachment
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AttachmentCreate'
      responses:
        '201':
          description: Successfully uploaded attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attachment'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '413':
          description: File too large

  /attachments/{id}:
    get:
      summary: Get a single attachment file
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved attachment file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid attachment ID
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Attachment not found

    delete:
      summary: Delete an attachment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted attachment
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Attachment not found

  /teams:
    get:
      summary: List teams
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: name
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved teams
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
        '401':
          description: Unauthorized

    post:
      summary: Create a new team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamCreate'
      responses:
        '201':
          description: Successfully created team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized

  /teams/{id}:
    get:
      summary: Get a single team
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid team ID
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Team not found

    patch:
      summary: Update a team
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamUpdate'
      responses:
        '200':
          description: Successfully updated team
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          description: Invalid request body
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Team not found

    delete:
      summary: Delete a team
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Successfully deleted team
        '401':
          description: Unauthorized
        '403':
          description: Access denied
        '404':
          description: Team not found 